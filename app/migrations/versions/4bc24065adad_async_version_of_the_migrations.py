"""async version of the migrations

Revision ID: 4bc24065adad
Revises: 
Create Date: 2025-09-14 15:09:52.564776

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4bc24065adad'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('curb_import_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('imported_by', sa.String(length=64), nullable=True),
    sa.Column('import_start', sa.DateTime(), nullable=True),
    sa.Column('import_end', sa.DateTime(), nullable=True),
    sa.Column('import_source', sa.String(length=64), nullable=True),
    sa.Column('total_records', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=32), nullable=True),
    sa.Column('error_summary', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_curb_import_logs_id'), 'curb_import_logs', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=128), nullable=True),
    sa.Column('middle_name', sa.String(length=128), nullable=True),
    sa.Column('last_name', sa.String(length=128), nullable=True),
    sa.Column('email_address', sa.String(length=255), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('address',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Address'),
    sa.Column('address_line_1', sa.String(length=255), nullable=True, comment='Line 1 of the Address'),
    sa.Column('address_line_2', sa.String(length=255), nullable=True, comment='Line 2 of the Address'),
    sa.Column('city', sa.String(length=255), nullable=True, comment='City of the Address'),
    sa.Column('state', sa.String(length=255), nullable=True, comment='State Name in the Address'),
    sa.Column('zip', sa.String(length=255), nullable=True, comment='Zip Code for the Address'),
    sa.Column('po_box', sa.String(length=255), nullable=True, comment='PO Box for the Address'),
    sa.Column('latitude', sa.String(length=255), nullable=True, comment='Latitude of the Address'),
    sa.Column('longitude', sa.String(length=255), nullable=True, comment='Longitude of the Address'),
    sa.Column('from_date', sa.DateTime(), nullable=True, comment='Address is effective from this date'),
    sa.Column('to_date', sa.DateTime(), nullable=True, comment='Address is effective till this date'),
    sa.Column('primary_contact_number', sa.String(length=255), nullable=True),
    sa.Column('primary_email_address', sa.String(length=255), nullable=True),
    sa.Column('additional_phone_1', sa.String(length=255), nullable=True),
    sa.Column('additional_phone_2', sa.String(length=255), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('case_entities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('case_no', sa.String(length=255), nullable=False),
    sa.Column('entity_name', sa.String(length=255), nullable=False),
    sa.Column('identifier', sa.String(length=255), nullable=False),
    sa.Column('identifier_value', sa.String(length=255), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_entities_id'), 'case_entities', ['id'], unique=False)
    op.create_table('case_statuses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_statuses_id'), 'case_statuses', ['id'], unique=False)
    op.create_index(op.f('ix_case_statuses_name'), 'case_statuses', ['name'], unique=True)
    op.create_table('case_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('prefix', sa.String(length=255), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_types_id'), 'case_types', ['id'], unique=False)
    op.create_index(op.f('ix_case_types_name'), 'case_types', ['name'], unique=True)
    op.create_index(op.f('ix_case_types_prefix'), 'case_types', ['prefix'], unique=True)
    op.create_table('correspondence',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.String(length=64), nullable=True),
    sa.Column('vehicle_id', sa.String(length=64), nullable=True),
    sa.Column('medallion_number', sa.String(length=64), nullable=True),
    sa.Column('date_sent', sa.Date(), nullable=True),
    sa.Column('time_sent', sa.Time(), nullable=True),
    sa.Column('mode', sa.String(length=64), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('email', sa.String(length=128), nullable=True),
    sa.Column('text', sa.String(length=128), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_correspondence_id'), 'correspondence', ['id'], unique=False)
    op.create_table('curb_trips',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('record_id', sa.String(length=32), nullable=False),
    sa.Column('period', sa.String(length=12), nullable=False),
    sa.Column('cab_number', sa.String(length=16), nullable=False),
    sa.Column('driver_id', sa.String(length=32), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('start_time', sa.Time(), nullable=True),
    sa.Column('end_time', sa.Time(), nullable=True),
    sa.Column('trip_amount', sa.Float(), nullable=True),
    sa.Column('tips', sa.Float(), nullable=True),
    sa.Column('extras', sa.Float(), nullable=True),
    sa.Column('tolls', sa.Float(), nullable=True),
    sa.Column('tax', sa.Float(), nullable=True),
    sa.Column('imp_tax', sa.Float(), nullable=True),
    sa.Column('total_amount', sa.Float(), nullable=True),
    sa.Column('gps_start_lat', sa.Float(), nullable=True),
    sa.Column('gps_start_lon', sa.Float(), nullable=True),
    sa.Column('gps_end_lat', sa.Float(), nullable=True),
    sa.Column('gps_end_lon', sa.Float(), nullable=True),
    sa.Column('from_address', sa.String(length=255), nullable=True),
    sa.Column('to_address', sa.String(length=255), nullable=True),
    sa.Column('payment_type', sa.String(length=2), nullable=True),
    sa.Column('cc_number', sa.String(length=32), nullable=True),
    sa.Column('auth_code', sa.String(length=32), nullable=True),
    sa.Column('auth_amount', sa.Float(), nullable=True),
    sa.Column('ehail_fee', sa.Float(), nullable=True),
    sa.Column('health_fee', sa.Float(), nullable=True),
    sa.Column('passengers', sa.Integer(), nullable=True),
    sa.Column('distance_service', sa.Float(), nullable=True),
    sa.Column('distance_bs', sa.Float(), nullable=True),
    sa.Column('reservation_number', sa.String(length=64), nullable=True),
    sa.Column('congestion_fee', sa.Float(), nullable=True),
    sa.Column('airport_fee', sa.Float(), nullable=True),
    sa.Column('cbdt_fee', sa.Float(), nullable=True),
    sa.Column('imported_at', sa.DateTime(), nullable=True),
    sa.Column('is_reconciled', sa.Boolean(), nullable=True),
    sa.Column('is_posted', sa.Boolean(), nullable=True),
    sa.Column('recon_stat', sa.Integer(), nullable=True),
    sa.Column('import_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['import_id'], ['curb_import_logs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_curb_trips_id'), 'curb_trips', ['id'], unique=False)
    op.create_index(op.f('ix_curb_trips_record_id'), 'curb_trips', ['record_id'], unique=False)
    op.create_table('dealers',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Vehicles'),
    sa.Column('dealer_name', sa.String(length=255), nullable=True, comment='Name of the dealer'),
    sa.Column('dealer_bank_name', sa.String(length=255), nullable=True, comment='Name of the dealer bank name'),
    sa.Column('dealer_bank_account_number', sa.String(length=50), nullable=True, comment='Name of the dealer bank name'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('document',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Documents'),
    sa.Column('document_date', sa.DateTime(), nullable=True, comment='Date of the document.'),
    sa.Column('document_name', sa.String(length=255), nullable=True, comment='Name of the document'),
    sa.Column('document_format', sa.String(length=4), nullable=True, comment='Format of the document such as PDF, PNG, DOC, etc.'),
    sa.Column('document_actual_size', sa.Integer(), nullable=True, comment='Size of the document in KB'),
    sa.Column('document_path', sa.String(length=255), nullable=True, comment='Path where the document is stored'),
    sa.Column('document_saved_size', sa.Integer(), nullable=True, comment='Size of the document saved in KB.'),
    sa.Column('document_upload_date', sa.DateTime(), nullable=True, comment='Date and time when the document was scanned or uploaded'),
    sa.Column('document_note', sa.String(length=255), nullable=True, comment='Notes about the document'),
    sa.Column('document_type', sa.String(length=255), nullable=True, comment='Type of the document for eg ssn, license'),
    sa.Column('object_type', sa.String(length=20), nullable=True, comment='The type of the object, for eg medallion, vehicle, driver, lease etc'),
    sa.Column('object_lookup_field', sa.String(length=10), nullable=True, comment='A lookup to indicate the type of object medallion id, medallion_number'),
    sa.Column('object_lookup_id', sa.String(length=128), nullable=True, comment='The ID on which the lookup needs to happen'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('driver_dmv_license',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Driver'),
    sa.Column('is_dmv_license_active', sa.Boolean(), nullable=True),
    sa.Column('dmv_license_number', sa.String(length=255), nullable=True, comment='TLC License Number'),
    sa.Column('dmv_license_issued_state', sa.String(length=255), nullable=True, comment='TLC License Number'),
    sa.Column('dmv_class', sa.String(length=255), nullable=True),
    sa.Column('dmv_license_status', sa.String(length=255), nullable=True),
    sa.Column('dmv_class_change_date', sa.DateTime(), nullable=True, comment='TLC Class Change Date'),
    sa.Column('dmv_license_expiry_date', sa.DateTime(), nullable=True, comment='TLC License Expiry Date'),
    sa.Column('dmv_renewal_fee', sa.Integer(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('driver_tlc_license',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Driver'),
    sa.Column('is_tlc_license_active', sa.Boolean(), nullable=True),
    sa.Column('tlc_license_number', sa.String(length=255), nullable=True, comment='TLC License Number'),
    sa.Column('tlc_issued_state', sa.String(length=255), nullable=True, comment='TLC License Number'),
    sa.Column('tlc_license_expiry_date', sa.DateTime(), nullable=True, comment='TLC License Expiry Date'),
    sa.Column('tlc_ddc_date', sa.DateTime(), nullable=True, comment='TLC DDC Date'),
    sa.Column('tlc_drug_test_date', sa.DateTime(), nullable=True, comment='TLC Drug Test Date'),
    sa.Column('previous_tlc_license_number', sa.String(length=255), nullable=True, comment='TLC License Number'),
    sa.Column('tlc_hack_date', sa.DateTime(), nullable=True, comment='TLC Hack Date'),
    sa.Column('tlc_lease_card_date', sa.DateTime(), nullable=True, comment='TLC Hack Date'),
    sa.Column('tlc_renewal_fee', sa.Integer(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('esign_envelopes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('envelope_id', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=64), nullable=False),
    sa.Column('object_type', sa.String(length=64), nullable=False),
    sa.Column('object_id', sa.Integer(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_esign_envelopes_envelope_id'), 'esign_envelopes', ['envelope_id'], unique=True)
    op.create_index(op.f('ix_esign_envelopes_id'), 'esign_envelopes', ['id'], unique=False)
    op.create_table('ezpass_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('log_date', sa.DateTime(), nullable=False),
    sa.Column('log_type', sa.String(length=255), nullable=False),
    sa.Column('records_impacted', sa.Integer(), nullable=True),
    sa.Column('success_count', sa.Integer(), nullable=True),
    sa.Column('unidentified_count', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ezpass_logs_id'), 'ezpass_logs', ['id'], unique=False)
    op.create_table('lease_payment_configuration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('config_type', sa.String(length=128), nullable=True, comment='Config Type'),
    sa.Column('day_shift_amount', sa.Integer(), nullable=True, comment='Day shift payment'),
    sa.Column('night_shift_amount', sa.Integer(), nullable=True, comment='Night shift payment'),
    sa.Column('total_amount', sa.Integer(), nullable=True, comment='Total payment amount'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_lease_payment_configuration_id'), 'lease_payment_configuration', ['id'], unique=False)
    op.create_table('lease_presets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lease_type', sa.String(length=50), nullable=False),
    sa.Column('vehicle_year', sa.Integer(), nullable=True),
    sa.Column('vehicle_make', sa.String(length=50), nullable=True),
    sa.Column('vehicle_model', sa.String(length=50), nullable=True),
    sa.Column('weekly_rate', sa.Float(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_lease_presets_id'), 'lease_presets', ['id'], unique=False)
    op.create_index(op.f('ix_lease_presets_lease_type'), 'lease_presets', ['lease_type'], unique=False)
    op.create_table('medallion_renewals',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Medallion Renewal'),
    sa.Column('medallion_number', sa.String(length=4), nullable=True, comment='Medallion number associated with the renewal'),
    sa.Column('renewal_date', sa.DateTime(), nullable=True, comment='Date when the renewal occurred'),
    sa.Column('renewal_from', sa.Date(), nullable=True, comment='Start date of the renewal period'),
    sa.Column('renewal_to', sa.Date(), nullable=True, comment='End date of the renewal period'),
    sa.Column('renewal_fee', sa.DECIMAL(precision=15, scale=2), nullable=True, comment='Fee for the renewal'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('medallion_storage',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Medallion Storage'),
    sa.Column('medallion_number', sa.String(length=64), nullable=True, comment='Medallion number associated with the storage'),
    sa.Column('storage_initiated_date', sa.Date(), nullable=True, comment='Date when the storage was initiated'),
    sa.Column('storage_date', sa.Date(), nullable=True, comment='Date when the storage was completed'),
    sa.Column('storage_mode', sa.CHAR(length=1), nullable=True, comment='Storage Mode: Physical (P) or Virtual (V)'),
    sa.Column('storage_letter_signed_by', sa.Integer(), nullable=True, comment='User ID of the person who signed the storage letter'),
    sa.Column('storage_rate_card', sa.Date(), nullable=True, comment='Rate card date associated with the storage'),
    sa.Column('storage_reason', sa.String(length=45), nullable=True, comment='Reason for storage (no lookup planned currently)'),
    sa.Column('retrieval_date', sa.Date(), nullable=True, comment='Date when the Medallion was retrieved from storage'),
    sa.Column('retrieved_by', sa.String(length=255), nullable=True, comment='Document retrieved by user'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pvb_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('log_date', sa.DateTime(), nullable=False),
    sa.Column('log_type', sa.String(length=50), nullable=False),
    sa.Column('records_impacted', sa.Integer(), nullable=True),
    sa.Column('success_count', sa.Integer(), nullable=True),
    sa.Column('unidentified_count', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_pvb_logs_id'), 'pvb_logs', ['id'], unique=False)
    op.create_table('query_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('prompt', sa.Text(), nullable=False),
    sa.Column('validated_sql', sa.Text(), nullable=False),
    sa.Column('execution_status', sa.String(length=64), nullable=True),
    sa.Column('executed_at', sa.DateTime(), nullable=True),
    sa.Column('filters_applied', sa.JSON(), nullable=True),
    sa.Column('columns_returned', sa.JSON(), nullable=True),
    sa.Column('rows_returned', sa.Integer(), nullable=True),
    sa.Column('favorite', sa.Boolean(), nullable=True),
    sa.Column('is_shared', sa.Boolean(), nullable=True),
    sa.Column('exported_formats', sa.JSON(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_query_records_id'), 'query_records', ['id'], unique=False)
    op.create_table('report_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('report_type', sa.String(length=50), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('file_key', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=54), nullable=True),
    sa.Column('is_autormated', sa.Boolean(), nullable=True),
    sa.Column('error_message', sa.String(length=255), nullable=True),
    sa.Column('generated_at', sa.DateTime(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_report_logs_id'), 'report_logs', ['id'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_table('bank_account',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for the Bank Account'),
    sa.Column('bank_name', sa.String(length=255), nullable=True, comment='Name of the Bank'),
    sa.Column('bank_account_number', sa.BigInteger(), nullable=True, comment='Bank Account Number'),
    sa.Column('bank_account_status', sa.String(length=255), nullable=True, comment='Account Status (Not used as a code)'),
    sa.Column('bank_account_name', sa.String(length=255), nullable=True, comment='Name of the Bank Account Holder'),
    sa.Column('effective_from', sa.Date(), nullable=True, comment='Date when the bank account if effective from'),
    sa.Column('bank_routing_number', sa.String(length=45), nullable=True, comment='Bank Routing Number to be used for ACH'),
    sa.Column('bank_account_type', sa.CHAR(length=1), nullable=True, comment='Bank Account Type to indicate Savings (S) or Checking (C)'),
    sa.Column('bank_address_id', sa.Integer(), nullable=True, comment='Bank Address Id used from the Address table'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['bank_address_id'], ['address.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('case_reassignments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('case_no', sa.String(length=255), nullable=False),
    sa.Column('step_id', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('user_id_at_assignment', sa.Integer(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id_at_assignment'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_reassignments_id'), 'case_reassignments', ['id'], unique=False)
    op.create_index(op.f('ix_case_reassignments_step_id'), 'case_reassignments', ['step_id'], unique=False)
    op.create_table('case_steps',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('case_type_id', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Integer(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['case_type_id'], ['case_types.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_steps_id'), 'case_steps', ['id'], unique=False)
    op.create_index(op.f('ix_case_steps_name'), 'case_steps', ['name'], unique=True)
    op.create_table('curb_trip_reconcilation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trip_id', sa.Integer(), nullable=False),
    sa.Column('recon_stat', sa.Integer(), nullable=False),
    sa.Column('reconciled_at', sa.DateTime(), nullable=True),
    sa.Column('reconciled_by', sa.String(length=64), nullable=True),
    sa.ForeignKeyConstraint(['trip_id'], ['curb_trips.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_curb_trip_reconcilation_id'), 'curb_trip_reconcilation', ['id'], unique=False)
    op.create_table('shared_queries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('query_id', sa.Integer(), nullable=True),
    sa.Column('shared_with_user_id', sa.Integer(), nullable=True),
    sa.Column('shared_by_user_id', sa.Integer(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['query_id'], ['query_records.id'], ),
    sa.ForeignKeyConstraint(['shared_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['shared_with_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_shared_queries_id'), 'shared_queries', ['id'], unique=False)
    op.create_table('users_and_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('vehicle_entity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entity_name', sa.String(length=255), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('entity_status', sa.String(length=255), nullable=True),
    sa.Column('ein', sa.String(length=255), nullable=True),
    sa.Column('entity_address_id', sa.Integer(), nullable=True),
    sa.Column('contact_number', sa.String(length=255), nullable=True),
    sa.Column('contact_email', sa.String(length=255), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['entity_address_id'], ['address.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_id')
    )
    op.create_table('case_reassignment_assigned_by_roles',
    sa.Column('case_reassignment_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['case_reassignment_id'], ['case_reassignments.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('case_reassignment_id', 'role_id')
    )
    op.create_table('case_reassignment_roles_at_assignment',
    sa.Column('case_reassignment_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['case_reassignment_id'], ['case_reassignments.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('case_reassignment_id', 'role_id')
    )
    op.create_table('case_step_configs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('step_id', sa.String(length=255), nullable=True),
    sa.Column('step_name', sa.String(length=255), nullable=True),
    sa.Column('case_step_id', sa.Integer(), nullable=False),
    sa.Column('case_type_id', sa.Integer(), nullable=False),
    sa.Column('current_assignee_id', sa.Integer(), nullable=True),
    sa.Column('next_assignee_id', sa.Integer(), nullable=True),
    sa.Column('next_step_id', sa.String(length=255), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['case_step_id'], ['case_steps.id'], ),
    sa.ForeignKeyConstraint(['case_type_id'], ['case_types.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['current_assignee_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['next_assignee_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_step_configs_id'), 'case_step_configs', ['id'], unique=False)
    op.create_index(op.f('ix_case_step_configs_step_id'), 'case_step_configs', ['step_id'], unique=True)
    op.create_index(op.f('ix_case_step_configs_step_name'), 'case_step_configs', ['step_name'], unique=True)
    op.create_table('drivers',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Driver'),
    sa.Column('first_name', sa.String(length=128), nullable=True, comment='First Name of the Driver'),
    sa.Column('middle_name', sa.String(length=128), nullable=True, comment='Middle Name of the Driver'),
    sa.Column('last_name', sa.String(length=128), nullable=True, comment='Last Name of the Driver'),
    sa.Column('full_name', sa.String(length=128), nullable=True, comment='Full Name of the Driver'),
    sa.Column('ssn', sa.String(length=128), nullable=True, comment='Social Security Number of the Driver'),
    sa.Column('dob', sa.String(length=64), nullable=True),
    sa.Column('phone_number_1', sa.String(length=18), nullable=True),
    sa.Column('phone_number_2', sa.String(length=18), nullable=True),
    sa.Column('email_address', sa.String(length=128), nullable=True),
    sa.Column('driver_id', sa.String(length=128), nullable=True),
    sa.Column('outstanding_receivables', sa.String(length=255), nullable=True, comment='Outstanding Receivables for the Driver'),
    sa.Column('outstanding_payments', sa.String(length=255), nullable=True, comment='Outstanding Payments for the Driver'),
    sa.Column('violation_due_at_registration', sa.String(length=255), nullable=True, comment='Violation due at registration'),
    sa.Column('driver_type', sa.String(length=64), nullable=True, comment='Type of the Driver, WAV Or Regular'),
    sa.Column('drive_locked', sa.Boolean(), nullable=True, comment='Indicates if the Driver is Locked'),
    sa.Column('driver_status', sa.String(length=50), nullable=True, comment='Driver status can be Registration In Progress, Registered, Approved, Active or Inactive'),
    sa.Column('is_additional_driver', sa.Boolean(), nullable=True, comment='Flag indicating if this is an Additional Driver'),
    sa.Column('driver_manager_id', sa.Integer(), nullable=True, comment='Foreign Key to Drivers table for Manager'),
    sa.Column('contract_end_date', sa.String(length=255), nullable=True, comment='Contract End Date'),
    sa.Column('contract_start_date', sa.String(length=255), nullable=True, comment='Contract Start Date'),
    sa.Column('pay_to', sa.String(length=128), nullable=True, comment='Name of the person to whom payment has to be made'),
    sa.Column('pay_to_mode', sa.String(length=128), nullable=True, comment='Would be with Check or ACH'),
    sa.Column('other_payment_options', sa.String(length=128), nullable=True, comment='Other Payment options Pay By Cash, Pay by Checks or Pay by credit card'),
    sa.Column('other_payment_details', sa.String(length=128), nullable=True, comment='Payment details when Pay By Cash, Pay by Checks or Pay by credit card is selected'),
    sa.Column('primary_emergency_contact_person', sa.String(length=128), nullable=True, comment='Primary emergency contact detail'),
    sa.Column('primary_emergency_contact_relationship', sa.String(length=128), nullable=True, comment='Relation with primary emergency contact'),
    sa.Column('primary_emergency_contact_number', sa.String(length=128), nullable=True, comment='Relation with primary emergency contact number'),
    sa.Column('additional_emergency_contact_person', sa.String(length=128), nullable=True, comment='Additional emergency contact detail'),
    sa.Column('additional_emergency_contact_relationship', sa.String(length=128), nullable=True, comment='Relation with additional emergency contact'),
    sa.Column('additional_emergency_contact_number', sa.String(length=128), nullable=True, comment='Relation with additional emergency contact number'),
    sa.Column('bank_account_id', sa.Integer(), nullable=True, comment='Foreign Key to Bank Account'),
    sa.Column('primary_address_id', sa.Integer(), nullable=True, comment='Foreign Key to Address (Primary) table for Driver Address'),
    sa.Column('secondary_address_id', sa.Integer(), nullable=True, comment='Foreign Key to Address (Secondary) table for Driver Address'),
    sa.Column('tlc_license_number_id', sa.Integer(), nullable=True, comment='Foreign Key to TCL License Table'),
    sa.Column('dmv_license_number_id', sa.Integer(), nullable=True, comment='Foreign Key to DMV License Table'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dmv_license_number_id'], ['driver_dmv_license.id'], ),
    sa.ForeignKeyConstraint(['driver_manager_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['primary_address_id'], ['address.id'], ),
    sa.ForeignKeyConstraint(['secondary_address_id'], ['address.id'], ),
    sa.ForeignKeyConstraint(['tlc_license_number_id'], ['driver_tlc_license.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_drivers_bank_account_id'), 'drivers', ['bank_account_id'], unique=False)
    op.create_index(op.f('ix_drivers_dmv_license_number_id'), 'drivers', ['dmv_license_number_id'], unique=False)
    op.create_index(op.f('ix_drivers_driver_id'), 'drivers', ['driver_id'], unique=True)
    op.create_index(op.f('ix_drivers_driver_manager_id'), 'drivers', ['driver_manager_id'], unique=False)
    op.create_index(op.f('ix_drivers_primary_address_id'), 'drivers', ['primary_address_id'], unique=False)
    op.create_index(op.f('ix_drivers_secondary_address_id'), 'drivers', ['secondary_address_id'], unique=False)
    op.create_index(op.f('ix_drivers_tlc_license_number_id'), 'drivers', ['tlc_license_number_id'], unique=False)
    op.create_table('individual',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key'),
    sa.Column('first_name', sa.String(length=255), nullable=True),
    sa.Column('middle_name', sa.String(length=64), nullable=True),
    sa.Column('last_name', sa.String(length=255), nullable=True),
    sa.Column('primary_address_id', sa.Integer(), nullable=True, comment='Foreign Key to Primary Address in Address table'),
    sa.Column('secondary_address_id', sa.Integer(), nullable=True, comment='Foreign Key to Secondary Address in Address table'),
    sa.Column('bank_account_id', sa.Integer(), nullable=True, comment='Foreign Key to id in the Bank Account table'),
    sa.Column('masked_ssn', sa.String(length=255), nullable=True),
    sa.Column('dob', sa.String(length=255), nullable=True),
    sa.Column('passport', sa.String(length=255), nullable=True),
    sa.Column('passport_expiry_date', sa.DateTime(), nullable=True),
    sa.Column('driving_license', sa.String(length=255), nullable=True),
    sa.Column('driving_license_expiry_date', sa.DateTime(), nullable=True),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('primary_contact_number', sa.String(length=255), nullable=True),
    sa.Column('additional_phone_number_1', sa.String(length=255), nullable=True),
    sa.Column('additional_phone_number_2', sa.String(length=255), nullable=True),
    sa.Column('primary_email_address', sa.String(length=255), nullable=True),
    sa.Column('payee', sa.String(length=255), nullable=True),
    sa.Column('correspondence_method', sa.String(length=255), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['primary_address_id'], ['address.id'], ),
    sa.ForeignKeyConstraint(['secondary_address_id'], ['address.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_individual_primary_address_id'), 'individual', ['primary_address_id'], unique=False)
    op.create_index(op.f('ix_individual_secondary_address_id'), 'individual', ['secondary_address_id'], unique=False)
    op.create_table('mo_leases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payee', sa.String(length=255), nullable=True, comment='Name of the Payee for the MO Lease'),
    sa.Column('bank_account_id', sa.Integer(), nullable=True, comment='Foreign Key to Bank Account table'),
    sa.Column('contract_start_date', sa.Date(), nullable=True, comment='Start Date of the Contract'),
    sa.Column('contract_end_date', sa.Date(), nullable=True, comment='End Date of the Contract'),
    sa.Column('royalty_amount', sa.DECIMAL(precision=15, scale=2), nullable=True, comment='Royalty Amount for the MO Lease'),
    sa.Column('contract_term', sa.String(length=64), nullable=True, comment='Contract Term for the MO Lease'),
    sa.Column('contract_signed_mode', sa.CHAR(length=1), nullable=True, comment='Contract Signed Mode: In Person (I) or by Mail (M)'),
    sa.Column('mail_sent_date', sa.Date(), nullable=True, comment='Date when the contract mail was sent'),
    sa.Column('mail_received_date', sa.Date(), nullable=True, comment='Date when the contract mail was received after signature'),
    sa.Column('lease_signed_flag', sa.Boolean(), nullable=True, comment='Indicator if the lease is signed'),
    sa.Column('lease_signed_date', sa.Date(), nullable=True, comment='Date when the lease was signed'),
    sa.Column('in_house_lease', sa.CHAR(length=1), nullable=True, comment='Indicator if the lease is of In House type'),
    sa.Column('med_active_exemption', sa.CHAR(length=1), nullable=True, comment='Indicator to pay (Y) the Management Fee even if the Medallion is not active'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('case_step_config_paths',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('case_step_config_id', sa.Integer(), nullable=False),
    sa.Column('path', sa.String(length=255), nullable=True, comment='File path to JSON schema'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['case_step_config_id'], ['case_step_configs.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_step_config_paths_id'), 'case_step_config_paths', ['id'], unique=False)
    op.create_table('case_step_config_role',
    sa.Column('case_step_config_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['case_step_config_id'], ['case_step_configs.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('case_step_config_id', 'role_id')
    )
    op.create_table('case_type_first_steps',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('case_type_id', sa.Integer(), nullable=False),
    sa.Column('first_step_id', sa.Integer(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['case_type_id'], ['case_types.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['first_step_id'], ['case_step_configs.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_type_first_steps_id'), 'case_type_first_steps', ['id'], unique=False)
    op.create_table('corporation',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Corporation'),
    sa.Column('name', sa.String(length=255), nullable=True, comment='Name of the Corporation'),
    sa.Column('ein', sa.String(length=255), nullable=True, comment='EIN of the Corporation'),
    sa.Column('is_llc', sa.Boolean(), nullable=True, comment='Indicates if the Corporation is an LLC'),
    sa.Column('account_id', sa.String(length=255), nullable=True, comment='Account ID for the Corporation'),
    sa.Column('primary_contact_number', sa.String(length=255), nullable=True, comment='Primary phone number for the Corporation'),
    sa.Column('primary_contact_person_id', sa.Integer(), nullable=True, comment='Foreign Key to Individual table for primary contact person'),
    sa.Column('primary_email_address', sa.String(length=255), nullable=True, comment='Primary email address for the Corporation'),
    sa.Column('primary_address_id', sa.Integer(), nullable=True, comment='Foreign Key to Address table for primary address'),
    sa.Column('secondary_address_id', sa.Integer(), nullable=True, comment='Foreign Key to Address table for secondary address'),
    sa.Column('bank_account_id', sa.Integer(), nullable=True, comment='Foreign Key to id in the Bank Account table'),
    sa.Column('additional_bank_account_id', sa.Integer(), nullable=True, comment='Foreign Key to id in the Bank Account table'),
    sa.Column('payee', sa.String(length=255), nullable=True, comment='Payee for the Corporation'),
    sa.Column('additional_payee', sa.String(length=255), nullable=True, comment='Additional Payee for the Corporation'),
    sa.Column('president', sa.Integer(), nullable=True, comment='Foreign Key to Individual table for president'),
    sa.Column('secretary', sa.Integer(), nullable=True, comment='Foreign Key to Individual table for secretary'),
    sa.Column('corporate_officer', sa.Integer(), nullable=True, comment='Foreign Key to Individual table for corporate officer'),
    sa.Column('registered_date', sa.DateTime(), nullable=True, comment='Date when the Corporation was registered'),
    sa.Column('linked_pad_owner_id', sa.Integer(), nullable=True),
    sa.Column('contract_signed_mode', sa.CHAR(length=1), nullable=True, comment='Contract Signed Mode: In Person (I) or by Mail (M) or Print (P)'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['additional_bank_account_id'], ['bank_account.id'], ),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], ),
    sa.ForeignKeyConstraint(['corporate_officer'], ['individual.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['linked_pad_owner_id'], ['corporation.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['president'], ['individual.id'], ),
    sa.ForeignKeyConstraint(['primary_address_id'], ['address.id'], ),
    sa.ForeignKeyConstraint(['primary_contact_person_id'], ['individual.id'], ),
    sa.ForeignKeyConstraint(['secondary_address_id'], ['address.id'], ),
    sa.ForeignKeyConstraint(['secretary'], ['individual.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_corporation_corporate_officer'), 'corporation', ['corporate_officer'], unique=False)
    op.create_index(op.f('ix_corporation_president'), 'corporation', ['president'], unique=False)
    op.create_index(op.f('ix_corporation_primary_address_id'), 'corporation', ['primary_address_id'], unique=False)
    op.create_index(op.f('ix_corporation_primary_contact_person_id'), 'corporation', ['primary_contact_person_id'], unique=False)
    op.create_index(op.f('ix_corporation_secondary_address_id'), 'corporation', ['secondary_address_id'], unique=False)
    op.create_index(op.f('ix_corporation_secretary'), 'corporation', ['secretary'], unique=False)
    op.create_table('entity',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for the Entity'),
    sa.Column('dos_id', sa.String(length=255), nullable=True, comment='DOS Identifier for the Entity'),
    sa.Column('entity_name', sa.String(length=255), nullable=True, comment='Name of the Entity also known as Management Name'),
    sa.Column('original_title', sa.String(length=255), nullable=True, comment='Vehicle-related field retained for data migration'),
    sa.Column('registered_date', sa.DateTime(), nullable=True, comment='Date when the Entity was registered'),
    sa.Column('is_corporation', sa.Boolean(), nullable=True, comment='Indicates if the Entity is a Corporation'),
    sa.Column('contact_person_id', sa.Integer(), nullable=True, comment='Foreign Key to Individual table for contact person'),
    sa.Column('bank_id', sa.Integer(), nullable=True, comment='Bank Identifier for the Entity'),
    sa.Column('entity_address_id', sa.Integer(), nullable=True, comment="Foreign Key to Address table for the Entity's address"),
    sa.Column('owner', sa.Integer(), nullable=True, comment='Owner of the Entity, referenced from Individual table'),
    sa.Column('joint_owner', sa.Integer(), nullable=True, comment='Joint Owner of the Entity, referenced from Individual table'),
    sa.Column('num_corporations', sa.Integer(), nullable=True, comment='Number of corporations under the Entity'),
    sa.Column('ein_ssn', sa.String(length=255), nullable=True),
    sa.Column('president', sa.String(length=128), nullable=True, comment='ID of the President'),
    sa.Column('secretary', sa.String(length=128), nullable=True, comment='ID of the Secretary'),
    sa.Column('corporate_officer', sa.String(length=128), nullable=True, comment='ID of the Corporate Officer'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['bank_id'], ['bank_account.id'], ),
    sa.ForeignKeyConstraint(['contact_person_id'], ['individual.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['entity_address_id'], ['address.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_entity_entity_address_id'), 'entity', ['entity_address_id'], unique=False)
    op.create_table('slas',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Name of the SLA'),
    sa.Column('case_step_config_id', sa.Integer(), nullable=False),
    sa.Column('time_limit', sa.Integer(), nullable=False, comment='Time limit in minutes for the SLA'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Flag to indicate if the SLA is active'),
    sa.Column('escalation_level', sa.Integer(), nullable=False, comment='Escalation level for SLA'),
    sa.Column('role_id', sa.Integer(), nullable=True, comment='Role assigned to this SLA'),
    sa.Column('user_id', sa.Integer(), nullable=True, comment='User assigned to this SLA'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['case_step_config_id'], ['case_step_configs.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_slas_id'), 'slas', ['id'], unique=False)
    op.create_index(op.f('ix_slas_name'), 'slas', ['name'], unique=True)
    op.create_table('cases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('case_no', sa.String(length=255), nullable=False),
    sa.Column('case_type_id', sa.Integer(), nullable=False),
    sa.Column('case_status_id', sa.Integer(), nullable=False),
    sa.Column('sla_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.Column('case_step_config_id', sa.Integer(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['case_status_id'], ['case_statuses.id'], ),
    sa.ForeignKeyConstraint(['case_step_config_id'], ['case_step_configs.id'], ),
    sa.ForeignKeyConstraint(['case_type_id'], ['case_types.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['sla_id'], ['slas.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cases_id'), 'cases', ['id'], unique=False)
    op.create_table('medallion_owners',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key'),
    sa.Column('medallion_owner_type', sa.CHAR(length=1), nullable=True, comment='Individual (I) or Corporation (C)'),
    sa.Column('primary_phone', sa.CHAR(length=24), nullable=True),
    sa.Column('primary_email_address', sa.String(length=100), nullable=True),
    sa.Column('medallion_owner_status', sa.CHAR(length=1), nullable=True, comment='Status: Active (Y), Archived (N), or In Progress (I)'),
    sa.Column('active_till', sa.Date(), nullable=True),
    sa.Column('individual_id', sa.Integer(), nullable=True, comment='Primary Contact Person. Referred from Individual Table.'),
    sa.Column('corporation_id', sa.Integer(), nullable=True, comment='Foreign Key to Corporation table'),
    sa.Column('primary_address_id', sa.Integer(), nullable=True, comment='Address Id used from the Address table'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['corporation_id'], ['corporation.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['individual_id'], ['individual.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['primary_address_id'], ['address.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('audit_trail',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('done_by', sa.Integer(), nullable=True),
    sa.Column('user_role', sa.String(length=255), nullable=True),
    sa.Column('case_id', sa.Integer(), nullable=False),
    sa.Column('case_type', sa.String(length=255), nullable=False),
    sa.Column('step_name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('audit_trail_type', sa.Enum('AUTOMATED', 'MANUAL', name='audittrailtype'), nullable=False),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['done_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_trail_id'), 'audit_trail', ['id'], unique=False)
    op.create_table('medallions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('medallion_number', sa.CHAR(length=64), nullable=True, comment='Medallion Number by which the Medallion is identified'),
    sa.Column('medallion_type', sa.CHAR(length=24), nullable=True, comment='Medallion Type which could be Wav or Regular'),
    sa.Column('owner_type', sa.CHAR(length=1), nullable=True, comment='Owner Type is Corporation (C) or Individual (I)'),
    sa.Column('hack_indicator', sa.String(length=255), nullable=True),
    sa.Column('medallion_status', sa.CHAR(length=1), nullable=True, comment='The status of the Medallion. Possible statuses: I, A, V, Y, N'),
    sa.Column('medallion_renewal_date', sa.Date(), nullable=True, comment='Date when the Medallion renewal is due'),
    sa.Column('validity_start_date', sa.String(length=255), nullable=True, comment='Validity Start Date as per the recent renewal'),
    sa.Column('validity_end_date', sa.String(length=255), nullable=True, comment='Validity End Date as per the recent renewal'),
    sa.Column('first_signed', sa.String(length=255), nullable=True),
    sa.Column('merchant_name', sa.String(length=255), nullable=True, comment='Retained for Data Migration if required.'),
    sa.Column('default_amount', sa.String(length=255), nullable=True),
    sa.Column('agent_number', sa.Integer(), nullable=True),
    sa.Column('agent_name', sa.String(length=255), nullable=True),
    sa.Column('manger_name', sa.String(length=255), nullable=True, comment='Retained for Data Migration from older system.'),
    sa.Column('pay_to', sa.String(length=255), nullable=True, comment='Name of the person to whom payment has to be made'),
    sa.Column('last_renewal_date', sa.Date(), nullable=True, comment='Date when the Medallion was renewed last time'),
    sa.Column('renewal_path', sa.String(length=64), nullable=True),
    sa.Column('fs6_status', sa.CHAR(length=1), nullable=True),
    sa.Column('fs6_date', sa.DateTime(), nullable=True),
    sa.Column('mo_leases_id', sa.Integer(), nullable=True, comment='The id of the MO Leases.'),
    sa.Column('owner_id', sa.Integer(), nullable=True, comment='The id of the Medallion Owner. It is referenced from the Medallion Owner table.'),
    sa.Column('merchant_owner_id', sa.Integer(), nullable=True, comment='Retained for Data Migration if required.'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['merchant_owner_id'], ['bank_account.id'], ),
    sa.ForeignKeyConstraint(['mo_leases_id'], ['mo_leases.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['owner_id'], ['medallion_owners.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('medallion_number')
    )
    op.create_table('vehicles',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Vehicles'),
    sa.Column('vin', sa.String(length=64), nullable=True, comment='Vehicle Identification Number'),
    sa.Column('make', sa.String(length=45), nullable=True, comment='Make of the vehicle'),
    sa.Column('model', sa.String(length=45), nullable=True, comment='Model of the vehicle'),
    sa.Column('year', sa.String(length=4), nullable=True),
    sa.Column('cylinders', sa.Integer(), nullable=True),
    sa.Column('color', sa.String(length=50), nullable=True),
    sa.Column('vehicle_type', sa.String(length=255), nullable=True, comment='Would be either Regular or Wav'),
    sa.Column('is_hybrid', sa.Boolean(), nullable=True, comment='Is the vehicle hybrid or not'),
    sa.Column('base_price', sa.String(length=255), nullable=True, comment='Base price of the vehicle'),
    sa.Column('sales_tax', sa.String(length=255), nullable=True, comment='Sales tax applied to the vehicle'),
    sa.Column('vehicle_office', sa.String(length=255), nullable=True, comment='Vehicle Office'),
    sa.Column('is_delivered', sa.Boolean(), nullable=True, comment='Is the vehicle hybrid or not'),
    sa.Column('expected_delivery_date', sa.Date(), nullable=True, comment='The expected delivery date of the vehicle'),
    sa.Column('delivery_location', sa.String(length=255), nullable=True, comment='Delivery location of the vehicle'),
    sa.Column('delivery_note', sa.Text(), nullable=True, comment='Delivery note for the vehicle'),
    sa.Column('is_insurance_procured', sa.Boolean(), nullable=True, comment='The insurance procured for the vehicle'),
    sa.Column('tlc_hackup_inspection_date', sa.Date(), nullable=True, comment='TLC Hackup Inspection Date'),
    sa.Column('is_medallion_assigned', sa.Boolean(), nullable=True, comment='Is a medallion allocated to the vehicle'),
    sa.Column('vehicle_status', sa.String(length=50), nullable=True, comment='Status of the vehicle - one among Registration In Progress, Registered, Delivered, Hacked, Active & Inactive'),
    sa.Column('entity_id', sa.Integer(), nullable=True, comment='Foreign Key to Entity Table'),
    sa.Column('dealer_id', sa.Integer(), nullable=True, comment='Foreign Key to dealer Table'),
    sa.Column('medallion_id', sa.Integer(), nullable=True, comment='Foreign Key to medallion Table'),
    sa.Column('tsp', sa.String(length=255), nullable=True, comment='Taxi and Limousine Commission (TLC) Permit'),
    sa.Column('security_type', sa.String(length=255), nullable=True, comment='Security Type'),
    sa.Column('camera_type', sa.String(length=50), nullable=True, comment='Camera Type'),
    sa.Column('paint_address', sa.String(length=255), nullable=True, comment='Paint Address'),
    sa.Column('camera_address', sa.String(length=255), nullable=True, comment='Camera Address'),
    sa.Column('metro_address', sa.String(length=255), nullable=True, comment='Metro Address'),
    sa.Column('meter_type', sa.String(length=50), nullable=True, comment='Meter Type'),
    sa.Column('rooftop_address', sa.String(length=255), nullable=True, comment='Rooftop Address'),
    sa.Column('dmv_registration_address', sa.String(length=255), nullable=True, comment='DMV Registration Address'),
    sa.Column('tlc_inspection_address', sa.String(length=255), nullable=True, comment='TLC Inspection Address'),
    sa.Column('delay_reason', sa.Text(), nullable=True, comment='Delay Reason'),
    sa.Column('partition_type', sa.String(length=50), nullable=True, comment='Partition Type'),
    sa.Column('partition_address', sa.String(length=255), nullable=True, comment='Partition Address'),
    sa.Column('rooftop_type', sa.String(length=50), nullable=True, comment='Rooftop Type'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dealer_id'], ['dealers.id'], ),
    sa.ForeignKeyConstraint(['entity_id'], ['vehicle_entity.id'], ),
    sa.ForeignKeyConstraint(['medallion_id'], ['medallions.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ezpass_transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('transaction_id', sa.String(length=64), nullable=True),
    sa.Column('transaction_date', sa.Date(), nullable=False, comment='Original EZPass transaction date'),
    sa.Column('transaction_time', sa.Time(), nullable=True),
    sa.Column('posting_date', sa.Date(), nullable=True, comment='Date when transaction was posted to BATM'),
    sa.Column('medallion_no', sa.String(length=20), nullable=True, comment='Medallion number of the vehicle'),
    sa.Column('driver_id', sa.Integer(), nullable=True),
    sa.Column('vehicle_id', sa.Integer(), nullable=True),
    sa.Column('plate_no', sa.String(length=20), nullable=True, comment='Plate number of the vehicle'),
    sa.Column('tag_or_plate', sa.String(length=30), nullable=False),
    sa.Column('agency', sa.String(length=100), nullable=True),
    sa.Column('entry_plaza', sa.String(length=50), nullable=True),
    sa.Column('exit_plaza', sa.String(length=50), nullable=True),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False, comment='Imported, Associated, Posted, Failed'),
    sa.Column('associate_failed_reason', sa.Text(), nullable=True),
    sa.Column('post_failed_reason', sa.Text(), nullable=True),
    sa.Column('log_id', sa.Integer(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['log_id'], ['ezpass_logs.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ezpass_transactions_id'), 'ezpass_transactions', ['id'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_plate_no'), 'ezpass_transactions', ['plate_no'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_transaction_id'), 'ezpass_transactions', ['transaction_id'], unique=False)
    op.create_table('leases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lease_id', sa.String(length=255), nullable=True, comment='Lease ID'),
    sa.Column('lease_type', sa.String(length=50), nullable=True, comment='Type of lease'),
    sa.Column('medallion_id', sa.Integer(), nullable=True, comment='Foreign Key to medallion Table'),
    sa.Column('vehicle_id', sa.Integer(), nullable=True, comment='Foreign Key to Vehicles Table'),
    sa.Column('lease_start_date', sa.Date(), nullable=True, comment='Date of lease start date'),
    sa.Column('lease_end_date', sa.Date(), nullable=True, comment='Date of lease end date'),
    sa.Column('duration_in_weeks', sa.Integer(), nullable=True, comment='Date of lease end date'),
    sa.Column('is_auto_renewed', sa.Boolean(), nullable=True, comment='Has the lease been auto renewed'),
    sa.Column('is_day_shift', sa.Boolean(), nullable=True, comment='day shift'),
    sa.Column('is_night_shift', sa.Boolean(), nullable=True, comment='night shift'),
    sa.Column('repairs_responsibility', sa.String(length=100), nullable=True, comment='Repairs responsibility'),
    sa.Column('lease_date', sa.Date(), nullable=True, comment='Date of lease'),
    sa.Column('lease_status', sa.String(length=48), nullable=True, comment='Status of lease (A,C or R)'),
    sa.Column('lease_pay_day', sa.String(length=3), nullable=True, comment='Day for lease payment'),
    sa.Column('lease_payments_type', sa.String(length=15), nullable=True, comment='Behind or Advanced'),
    sa.Column('deposit_amount_paid', sa.Integer(), nullable=True, comment='Amount for lease payments type'),
    sa.Column('management_recommendation_amount', sa.Integer(), nullable=True, comment='Amount recommended for management'),
    sa.Column('lease_remark', sa.String(length=255), nullable=True, comment='Remarks for lease'),
    sa.Column('cancellation_fee', sa.Integer(), nullable=True, comment='Calculated vehicle lease'),
    sa.Column('preset_weekly_rate', sa.Float(), nullable=True, comment='The default rate from the LeasePreset table at time of creation'),
    sa.Column('overridden_weekly_rate', sa.Float(), nullable=True, comment='The manually overridden rate, if any'),
    sa.Column('override_reason', sa.String(length=255), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['medallion_id'], ['medallions.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('lease_id')
    )
    op.create_index(op.f('ix_leases_id'), 'leases', ['id'], unique=False)
    op.create_table('ledger_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=True),
    sa.Column('medallion_id', sa.Integer(), nullable=True),
    sa.Column('vehicle_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('debit', sa.Boolean(), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('receipt_number', sa.String(length=255), nullable=True),
    sa.Column('transaction_date', sa.Date(), nullable=True),
    sa.Column('transaction_time', sa.Time(), nullable=True),
    sa.Column('source_type', sa.Enum('EZPASS', 'PVB', 'CURB', 'LEASE', 'FEE', 'MANUAL_FEE', 'CURB_CARD_TXN', 'DTR', 'OTHERS', name='ledgersourcetype'), nullable=True),
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('ledger_id', sa.String(length=255), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['medallion_id'], ['medallions.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ledger_entries_id'), 'ledger_entries', ['id'], unique=False)
    op.create_table('pvb_violations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('plate_number', sa.String(length=64), nullable=False),
    sa.Column('state', sa.String(length=2), nullable=False),
    sa.Column('vehicle_type', sa.String(length=24), nullable=False),
    sa.Column('summons_number', sa.String(length=32), nullable=True),
    sa.Column('issue_date', sa.Date(), nullable=False),
    sa.Column('issue_time', sa.String(length=16), nullable=True),
    sa.Column('amount_due', sa.Integer(), nullable=True),
    sa.Column('amount_paid', sa.Integer(), nullable=True),
    sa.Column('driver_id', sa.Integer(), nullable=True),
    sa.Column('medallion_id', sa.Integer(), nullable=True),
    sa.Column('vehicle_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('associated_failed_reason', sa.Text(), nullable=True),
    sa.Column('post_failed_reason', sa.Text(), nullable=True),
    sa.Column('log_id', sa.Integer(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['log_id'], ['pvb_logs.id'], ),
    sa.ForeignKeyConstraint(['medallion_id'], ['medallions.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('summons_number')
    )
    op.create_index(op.f('ix_pvb_violations_id'), 'pvb_violations', ['id'], unique=False)
    op.create_index(op.f('ix_pvb_violations_plate_number'), 'pvb_violations', ['plate_number'], unique=False)
    op.create_table('vehicle_hackups',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Vehicle HackUp'),
    sa.Column('vehicle_id', sa.Integer(), nullable=False, comment='Foreign Key to Vehicles table'),
    sa.Column('tpep_provider', sa.String(length=255), nullable=True, comment='TPEP Type selected by the user'),
    sa.Column('configuration_type', sa.String(length=255), nullable=True, comment='Configuration type Camera or Partition'),
    sa.Column('is_paint_completed', sa.Boolean(), nullable=True, comment='Has painting completed'),
    sa.Column('paint_completed_date', sa.Date(), nullable=True, comment='Date when paint was completed'),
    sa.Column('paint_completed_charges', sa.Integer(), nullable=True, comment='Paint completion charges'),
    sa.Column('paint_status', sa.String(length=50), nullable=True, comment='Paint Status'),
    sa.Column('is_camera_installed', sa.Boolean(), nullable=True, comment='Has camera got installed'),
    sa.Column('camera_type', sa.String(length=255), nullable=True, comment='Type of camera installed'),
    sa.Column('camera_installed_date', sa.Date(), nullable=True, comment='Date when camera was installed'),
    sa.Column('camera_installed_charges', sa.Integer(), nullable=True, comment='Camera installation charges'),
    sa.Column('camera_status', sa.String(length=50), nullable=True, comment='Camera Status'),
    sa.Column('is_partition_installed', sa.Boolean(), nullable=True, comment='Has partition got installed'),
    sa.Column('partition_type', sa.String(length=255), nullable=True, comment='Type of partition installed'),
    sa.Column('partition_installed_date', sa.Date(), nullable=True, comment='Date when partition was installed'),
    sa.Column('partition_installed_charges', sa.Integer(), nullable=True, comment='partition installation charges'),
    sa.Column('partition_status', sa.String(length=50), nullable=True, comment='Partition Status'),
    sa.Column('is_meter_installed', sa.Boolean(), nullable=True, comment='Has meter been installed'),
    sa.Column('meter_installed_date', sa.Date(), nullable=True, comment='Date when the meter was installed'),
    sa.Column('meter_type', sa.String(length=255), nullable=True, comment='Type of meter installed'),
    sa.Column('meter_serial_number', sa.String(length=255), nullable=True, comment='Serial number of the installed meter'),
    sa.Column('meter_installed_charges', sa.Integer(), nullable=True, comment='Meter installation charges'),
    sa.Column('meter_status', sa.String(length=50), nullable=True, comment='Meter Status'),
    sa.Column('is_rooftop_installed', sa.Boolean(), nullable=True, comment='Whether the rooftop is installed'),
    sa.Column('rooftop_type', sa.String(length=255), nullable=True, comment='Type of rooftop installed'),
    sa.Column('rooftop_installed_date', sa.Date(), nullable=True, comment='Date when the rooftop was installed'),
    sa.Column('rooftop_installation_charges', sa.Integer(), nullable=True, comment='Rooftop installation charges'),
    sa.Column('rooftop_status', sa.String(length=50), nullable=True, comment='meter Status'),
    sa.Column('status', sa.String(length=50), nullable=False, comment='HackUp Status'),
    sa.Column('paint_from_location', sa.String(length=50), nullable=True, comment='Pickup location for paint'),
    sa.Column('paint_to_location', sa.String(length=50), nullable=True, comment='Drop location for paint'),
    sa.Column('camera_from_location', sa.String(length=50), nullable=True, comment='Pickup location for camera'),
    sa.Column('camera_to_location', sa.String(length=50), nullable=True, comment='Drop location for camera'),
    sa.Column('partition_from_location', sa.String(length=50), nullable=True, comment='Pickup location for partition'),
    sa.Column('partition_to_location', sa.String(length=50), nullable=True, comment='Drop location for partition'),
    sa.Column('meter_from_location', sa.String(length=50), nullable=True, comment='Pickup location for meter'),
    sa.Column('meter_to_location', sa.String(length=50), nullable=True, comment='Drop location for meter'),
    sa.Column('rooftop_from_location', sa.String(length=50), nullable=True, comment='Pickup location for rooftop'),
    sa.Column('rooftop_to_location', sa.String(length=50), nullable=True, comment='Drop location for rooftop'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('vehicle_inspections',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Vehicle Inspections'),
    sa.Column('vehicle_id', sa.Integer(), nullable=False, comment='Foreign Key to Vehicle table'),
    sa.Column('mile_run', sa.Boolean(), nullable=True, comment='Indicates if a mile run was completed'),
    sa.Column('inspection_date', sa.Date(), nullable=True, comment='Date of inspection'),
    sa.Column('inspection_time', sa.String(length=255), nullable=True, comment='Time of inspection'),
    sa.Column('odometer_reading_date', sa.Date(), nullable=True, comment='Date of odometer reading'),
    sa.Column('odometer_reading_time', sa.String(length=255), nullable=True, comment='Time of odometer reading'),
    sa.Column('odometer_reading', sa.Integer(), nullable=True, comment='Odometer reading at the time of inspection'),
    sa.Column('logged_date', sa.Date(), nullable=True, comment='Date when the inspection details were logged'),
    sa.Column('logged_time', sa.String(length=255), nullable=True, comment='Time when the inspection details were logged'),
    sa.Column('inspection_fee', sa.Float(), nullable=True, comment='Fee charged for the inspection'),
    sa.Column('result', sa.Enum('Pass', 'Fail', name='inspection_result'), nullable=True, comment='Result of the inspection'),
    sa.Column('next_inspection_due_date', sa.Date(), nullable=True, comment='Date when the next inspection is due'),
    sa.Column('status', sa.String(length=50), nullable=False, comment='Registration Status'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('vehicle_registration',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary Key for Vehicle Registration'),
    sa.Column('vehicle_id', sa.Integer(), nullable=False, comment='Foreign Key to Vehicle table'),
    sa.Column('registration_date', sa.Date(), nullable=False, comment='Date of registration'),
    sa.Column('registration_expiry_date', sa.Date(), nullable=False, comment='Expiry date of the registration'),
    sa.Column('registration_fee', sa.Float(), nullable=True, comment='Fee paid for the registration'),
    sa.Column('registration_state', sa.String(length=2), nullable=True, comment='Registration State'),
    sa.Column('registration_class', sa.String(length=2), nullable=True, comment='Registration Class'),
    sa.Column('plate_number', sa.String(length=255), nullable=True, comment='Vehicle plate number'),
    sa.Column('status', sa.String(length=50), nullable=False, comment='Registration Status'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('vehicle_repairs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('vehicle_id', sa.Integer(), nullable=False),
    sa.Column('invoice_date', sa.Date(), nullable=True),
    sa.Column('invoice_amount', sa.Float(), nullable=True),
    sa.Column('vehicle_in_date', sa.Date(), nullable=True),
    sa.Column('vehicle_in_time', sa.String(length=10), nullable=True),
    sa.Column('vehicle_out_date', sa.Date(), nullable=True),
    sa.Column('vehicle_out_time', sa.String(length=10), nullable=True),
    sa.Column('repair_paid_by', sa.String(length=10), nullable=True),
    sa.Column('next_service_due_by', sa.Date(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('daily_receipts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('vehicle_id', sa.Integer(), nullable=False),
    sa.Column('medallion_id', sa.Integer(), nullable=False),
    sa.Column('lease_id', sa.Integer(), nullable=False),
    sa.Column('receipt_number', sa.String(length=255), nullable=False),
    sa.Column('period_start', sa.DateTime(), nullable=False),
    sa.Column('period_end', sa.DateTime(), nullable=False),
    sa.Column('cc_earnings', sa.Float(), nullable=True),
    sa.Column('cash_earnings', sa.Float(), nullable=True),
    sa.Column('tips', sa.Float(), nullable=True),
    sa.Column('lease_due', sa.Float(), nullable=True),
    sa.Column('ezpass_due', sa.Float(), nullable=True),
    sa.Column('pvb_due', sa.Float(), nullable=True),
    sa.Column('curb_due', sa.Float(), nullable=True),
    sa.Column('manual_fee', sa.Float(), nullable=True),
    sa.Column('incentives', sa.Float(), nullable=True),
    sa.Column('cash_paid', sa.Float(), nullable=True),
    sa.Column('balance', sa.Float(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'FINALIZED', 'PAID', 'VOIDED', name='dtrstatus'), nullable=True),
    sa.Column('ledger_snapshot_id', sa.Integer(), nullable=True),
    sa.Column('receipt_html_key', sa.String(length=255), nullable=True),
    sa.Column('receipt_pdf_key', sa.String(length=255), nullable=True),
    sa.Column('receipt_excel_key', sa.String(length=255), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['lease_id'], ['leases.id'], ),
    sa.ForeignKeyConstraint(['medallion_id'], ['medallions.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_daily_receipts_id'), 'daily_receipts', ['id'], unique=False)
    op.create_table('lease_configuration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lease_id', sa.Integer(), nullable=True),
    sa.Column('lease_breakup_type', sa.String(length=64), nullable=True, comment='Lease breakup type can one of MED, VEH, DAY, NGT, LT, SUN-D, SUN-N, MON-D, MON-N, TUE-D'),
    sa.Column('lease_limit', sa.Integer(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['lease_id'], ['leases.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_lease_configuration_id'), 'lease_configuration', ['id'], unique=False)
    op.create_table('lease_drivers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.String(length=128), nullable=True, comment='Foreign Key to driver.driver_id'),
    sa.Column('lease_id', sa.Integer(), nullable=True, comment='Foreign Key to lease Table'),
    sa.Column('driver_role', sa.String(length=10), nullable=True, comment='Driver role will include DL,NL, X,DX, NX'),
    sa.Column('is_day_night_shift', sa.Boolean(), nullable=True, comment='Is driver doing night shifts'),
    sa.Column('co_lease_seq', sa.CHAR(length=1), nullable=True, comment='Co Lease number in sequence'),
    sa.Column('date_added', sa.Date(), nullable=True, comment='Date lesee has been added'),
    sa.Column('date_terminated', sa.Date(), nullable=True, comment='Date lesee has been terminated'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.driver_id'], ),
    sa.ForeignKeyConstraint(['lease_id'], ['leases.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_lease_drivers_driver_id'), 'lease_drivers', ['driver_id'], unique=False)
    op.create_index(op.f('ix_lease_drivers_id'), 'lease_drivers', ['id'], unique=False)
    op.create_table('lease_schedule',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lease_id', sa.Integer(), nullable=True),
    sa.Column('installment_number', sa.Integer(), nullable=True),
    sa.Column('installment_due_date', sa.Date(), nullable=True),
    sa.Column('installment_amount', sa.Float(), nullable=True),
    sa.Column('installment_status', sa.CHAR(length=2), nullable=True, comment='D, P, OD, C'),
    sa.Column('installment_paid_date', sa.Date(), nullable=True, comment='Date when the installment is paid'),
    sa.Column('dtr_number', sa.CHAR(length=24), nullable=True, comment='DTR Number'),
    sa.Column('remarks', sa.String(length=255), nullable=True, comment='Comment against the installment'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['lease_id'], ['leases.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_lease_schedule_id'), 'lease_schedule', ['id'], unique=False)
    op.create_table('lease_driver_documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lease_driver_id', sa.Integer(), nullable=False, comment='Foreign Key to Lease Driver Table'),
    sa.Column('document_envelope_id', sa.String(length=120), nullable=True, comment='Document envelope id that is present in DocuSign'),
    sa.Column('has_frontend_signed', sa.Boolean(), nullable=True),
    sa.Column('frontend_signed_date', sa.Date(), nullable=True),
    sa.Column('has_driver_signed', sa.Boolean(), nullable=True),
    sa.Column('driver_signed_date', sa.Date(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['lease_driver_id'], ['lease_drivers.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_lease_driver_documents_id'), 'lease_driver_documents', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_lease_driver_documents_id'), table_name='lease_driver_documents')
    op.drop_table('lease_driver_documents')
    op.drop_index(op.f('ix_lease_schedule_id'), table_name='lease_schedule')
    op.drop_table('lease_schedule')
    op.drop_index(op.f('ix_lease_drivers_id'), table_name='lease_drivers')
    op.drop_index(op.f('ix_lease_drivers_driver_id'), table_name='lease_drivers')
    op.drop_table('lease_drivers')
    op.drop_index(op.f('ix_lease_configuration_id'), table_name='lease_configuration')
    op.drop_table('lease_configuration')
    op.drop_index(op.f('ix_daily_receipts_id'), table_name='daily_receipts')
    op.drop_table('daily_receipts')
    op.drop_table('vehicle_repairs')
    op.drop_table('vehicle_registration')
    op.drop_table('vehicle_inspections')
    op.drop_table('vehicle_hackups')
    op.drop_index(op.f('ix_pvb_violations_plate_number'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_id'), table_name='pvb_violations')
    op.drop_table('pvb_violations')
    op.drop_index(op.f('ix_ledger_entries_id'), table_name='ledger_entries')
    op.drop_table('ledger_entries')
    op.drop_index(op.f('ix_leases_id'), table_name='leases')
    op.drop_table('leases')
    op.drop_index(op.f('ix_ezpass_transactions_transaction_id'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_plate_no'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_id'), table_name='ezpass_transactions')
    op.drop_table('ezpass_transactions')
    op.drop_table('vehicles')
    op.drop_table('medallions')
    op.drop_index(op.f('ix_audit_trail_id'), table_name='audit_trail')
    op.drop_table('audit_trail')
    op.drop_table('medallion_owners')
    op.drop_index(op.f('ix_cases_id'), table_name='cases')
    op.drop_table('cases')
    op.drop_index(op.f('ix_slas_name'), table_name='slas')
    op.drop_index(op.f('ix_slas_id'), table_name='slas')
    op.drop_table('slas')
    op.drop_index(op.f('ix_entity_entity_address_id'), table_name='entity')
    op.drop_table('entity')
    op.drop_index(op.f('ix_corporation_secretary'), table_name='corporation')
    op.drop_index(op.f('ix_corporation_secondary_address_id'), table_name='corporation')
    op.drop_index(op.f('ix_corporation_primary_contact_person_id'), table_name='corporation')
    op.drop_index(op.f('ix_corporation_primary_address_id'), table_name='corporation')
    op.drop_index(op.f('ix_corporation_president'), table_name='corporation')
    op.drop_index(op.f('ix_corporation_corporate_officer'), table_name='corporation')
    op.drop_table('corporation')
    op.drop_index(op.f('ix_case_type_first_steps_id'), table_name='case_type_first_steps')
    op.drop_table('case_type_first_steps')
    op.drop_table('case_step_config_role')
    op.drop_index(op.f('ix_case_step_config_paths_id'), table_name='case_step_config_paths')
    op.drop_table('case_step_config_paths')
    op.drop_table('mo_leases')
    op.drop_index(op.f('ix_individual_secondary_address_id'), table_name='individual')
    op.drop_index(op.f('ix_individual_primary_address_id'), table_name='individual')
    op.drop_table('individual')
    op.drop_index(op.f('ix_drivers_tlc_license_number_id'), table_name='drivers')
    op.drop_index(op.f('ix_drivers_secondary_address_id'), table_name='drivers')
    op.drop_index(op.f('ix_drivers_primary_address_id'), table_name='drivers')
    op.drop_index(op.f('ix_drivers_driver_manager_id'), table_name='drivers')
    op.drop_index(op.f('ix_drivers_driver_id'), table_name='drivers')
    op.drop_index(op.f('ix_drivers_dmv_license_number_id'), table_name='drivers')
    op.drop_index(op.f('ix_drivers_bank_account_id'), table_name='drivers')
    op.drop_table('drivers')
    op.drop_index(op.f('ix_case_step_configs_step_name'), table_name='case_step_configs')
    op.drop_index(op.f('ix_case_step_configs_step_id'), table_name='case_step_configs')
    op.drop_index(op.f('ix_case_step_configs_id'), table_name='case_step_configs')
    op.drop_table('case_step_configs')
    op.drop_table('case_reassignment_roles_at_assignment')
    op.drop_table('case_reassignment_assigned_by_roles')
    op.drop_table('vehicle_entity')
    op.drop_table('users_and_roles')
    op.drop_index(op.f('ix_shared_queries_id'), table_name='shared_queries')
    op.drop_table('shared_queries')
    op.drop_index(op.f('ix_curb_trip_reconcilation_id'), table_name='curb_trip_reconcilation')
    op.drop_table('curb_trip_reconcilation')
    op.drop_index(op.f('ix_case_steps_name'), table_name='case_steps')
    op.drop_index(op.f('ix_case_steps_id'), table_name='case_steps')
    op.drop_table('case_steps')
    op.drop_index(op.f('ix_case_reassignments_step_id'), table_name='case_reassignments')
    op.drop_index(op.f('ix_case_reassignments_id'), table_name='case_reassignments')
    op.drop_table('case_reassignments')
    op.drop_table('bank_account')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_report_logs_id'), table_name='report_logs')
    op.drop_table('report_logs')
    op.drop_index(op.f('ix_query_records_id'), table_name='query_records')
    op.drop_table('query_records')
    op.drop_index(op.f('ix_pvb_logs_id'), table_name='pvb_logs')
    op.drop_table('pvb_logs')
    op.drop_table('medallion_storage')
    op.drop_table('medallion_renewals')
    op.drop_index(op.f('ix_lease_presets_lease_type'), table_name='lease_presets')
    op.drop_index(op.f('ix_lease_presets_id'), table_name='lease_presets')
    op.drop_table('lease_presets')
    op.drop_index(op.f('ix_lease_payment_configuration_id'), table_name='lease_payment_configuration')
    op.drop_table('lease_payment_configuration')
    op.drop_index(op.f('ix_ezpass_logs_id'), table_name='ezpass_logs')
    op.drop_table('ezpass_logs')
    op.drop_index(op.f('ix_esign_envelopes_id'), table_name='esign_envelopes')
    op.drop_index(op.f('ix_esign_envelopes_envelope_id'), table_name='esign_envelopes')
    op.drop_table('esign_envelopes')
    op.drop_table('driver_tlc_license')
    op.drop_table('driver_dmv_license')
    op.drop_table('document')
    op.drop_table('dealers')
    op.drop_index(op.f('ix_curb_trips_record_id'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_id'), table_name='curb_trips')
    op.drop_table('curb_trips')
    op.drop_index(op.f('ix_correspondence_id'), table_name='correspondence')
    op.drop_table('correspondence')
    op.drop_index(op.f('ix_case_types_prefix'), table_name='case_types')
    op.drop_index(op.f('ix_case_types_name'), table_name='case_types')
    op.drop_index(op.f('ix_case_types_id'), table_name='case_types')
    op.drop_table('case_types')
    op.drop_index(op.f('ix_case_statuses_name'), table_name='case_statuses')
    op.drop_index(op.f('ix_case_statuses_id'), table_name='case_statuses')
    op.drop_table('case_statuses')
    op.drop_index(op.f('ix_case_entities_id'), table_name='case_entities')
    op.drop_table('case_entities')
    op.drop_table('address')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_curb_import_logs_id'), table_name='curb_import_logs')
    op.drop_table('curb_import_logs')
    # ### end Alembic commands ###
