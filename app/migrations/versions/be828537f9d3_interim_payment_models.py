"""interim payment models

Revision ID: be828537f9d3
Revises: b4f0e0554a7d
Create Date: 2025-10-21 16:10:59.843963

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'be828537f9d3'
down_revision: Union[str, Sequence[str], None] = 'b4f0e0554a7d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('interim_payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payment_id', sa.String(length=32), nullable=False, comment='Unique payment identifier (IMP-YYYY-####)'),
    sa.Column('driver_id', sa.Integer(), nullable=False, comment='Driver making the payment'),
    sa.Column('medallion_id', sa.Integer(), nullable=False, comment='Medallion associated with payment'),
    sa.Column('lease_id', sa.Integer(), nullable=True, comment='Active lease at time of payment (optional)'),
    sa.Column('payment_date', sa.Date(), nullable=False, comment='Date when the payment was received'),
    sa.Column('total_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total payment amount'),
    sa.Column('payment_method', sa.Enum('Cash', 'Check', 'ACH', name='payment_method_enum'), nullable=False, comment='Payment method: Cash, Check, ACH'),
    sa.Column('check_number', sa.String(length=64), nullable=True, comment='Check number if payment method is check'),
    sa.Column('allocated_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total amount allocated across all categories'),
    sa.Column('unallocated_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Amount not yet allocated (auto-applied to Lease)'),
    sa.Column('status', sa.String(length=16), nullable=False, comment='Payment status: Completed, Voided, Reversed'),
    sa.Column('notes', sa.String(length=512), nullable=True, comment='Additional notes or comments'),
    sa.Column('receipt_number', sa.String(length=32), nullable=False, comment='Receipt number for this payment'),
    sa.Column('receipt_issued_at', sa.DateTime(), nullable=False, comment='When receipt was issued'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['lease_id'], ['leases.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['medallion_id'], ['medallions.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_payment_driver_date', 'interim_payments', ['driver_id', 'payment_date'], unique=False)
    op.create_index('idx_payment_medallion_date', 'interim_payments', ['medallion_id', 'payment_date'], unique=False)
    op.create_index('idx_payment_status', 'interim_payments', ['status'], unique=False)
    op.create_index(op.f('ix_interim_payments_driver_id'), 'interim_payments', ['driver_id'], unique=False)
    op.create_index(op.f('ix_interim_payments_id'), 'interim_payments', ['id'], unique=False)
    op.create_index(op.f('ix_interim_payments_lease_id'), 'interim_payments', ['lease_id'], unique=False)
    op.create_index(op.f('ix_interim_payments_medallion_id'), 'interim_payments', ['medallion_id'], unique=False)
    op.create_index(op.f('ix_interim_payments_payment_date'), 'interim_payments', ['payment_date'], unique=False)
    op.create_index(op.f('ix_interim_payments_payment_id'), 'interim_payments', ['payment_id'], unique=True)
    op.create_index(op.f('ix_interim_payments_receipt_number'), 'interim_payments', ['receipt_number'], unique=False)
    op.create_index(op.f('ix_interim_payments_status'), 'interim_payments', ['status'], unique=False)
    op.create_table('interim_payment_allocations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=False, comment='Reference to parent payment'),
    sa.Column('category', sa.Enum('Lease', 'Repair', 'Loan', 'EZPass', 'PVB', 'Misc', name='allocation_category_enum'), nullable=False, comment='Obligation category'),
    sa.Column('reference_id', sa.String(length=64), nullable=False, comment='Reference to specific obligation (Invoice ID, Loan ID, Ticket #m etc.)'),
    sa.Column('description', sa.String(length=256), nullable=True, comment='Human-readable description of the obligation'),
    sa.Column('allocated_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Amount allocated to this obligation'),
    sa.Column('outstanding_before', sa.Numeric(precision=10, scale=2), nullable=False, comment='Outstanding balance before payment'),
    sa.Column('outstanding_after', sa.Numeric(precision=10, scale=2), nullable=False, comment='Outstanding balance after payment'),
    sa.Column('ledger_posting_ref', sa.String(length=64), nullable=True, comment='Reference to ledger posting entry'),
    sa.Column('posted_at', sa.DateTime(), nullable=True, comment='When this allocation was posted to ledger'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_id'], ['interim_payments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_allocation_category_ref', 'interim_payment_allocations', ['category', 'reference_id'], unique=False)
    op.create_index('idx_allocation_payment', 'interim_payment_allocations', ['payment_id'], unique=False)
    op.create_index(op.f('ix_interim_payment_allocations_category'), 'interim_payment_allocations', ['category'], unique=False)
    op.create_index(op.f('ix_interim_payment_allocations_id'), 'interim_payment_allocations', ['id'], unique=False)
    op.create_index(op.f('ix_interim_payment_allocations_ledger_posting_ref'), 'interim_payment_allocations', ['ledger_posting_ref'], unique=False)
    op.create_index(op.f('ix_interim_payment_allocations_payment_id'), 'interim_payment_allocations', ['payment_id'], unique=False)
    op.create_index(op.f('ix_interim_payment_allocations_reference_id'), 'interim_payment_allocations', ['reference_id'], unique=False)
    op.create_table('interim_payment_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('log_date', sa.DateTime(), nullable=False, comment='When the operation occurred'),
    sa.Column('log_type', sa.String(length=32), nullable=False, comment='Type of operation: Create, Allocate, Void, Reverse'),
    sa.Column('payment_id', sa.Integer(), nullable=True, comment='Related payment (if applicable)'),
    sa.Column('records_impacted', sa.Integer(), nullable=False, comment='Number of records affected'),
    sa.Column('status', sa.String(length=16), nullable=False, comment='Operation status: Success, Failure, Partial'),
    sa.Column('details', sa.String(length=1024), nullable=True, comment='Detailed information about the operation'),
    sa.Column('error_message', sa.String(length=512), nullable=True, comment='Error message if operation failed'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_id'], ['interim_payments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_log_date_type', 'interim_payment_logs', ['log_date', 'log_type'], unique=False)
    op.create_index('idx_log_status', 'interim_payment_logs', ['status'], unique=False)
    op.create_index(op.f('ix_interim_payment_logs_id'), 'interim_payment_logs', ['id'], unique=False)
    op.create_index(op.f('ix_interim_payment_logs_log_date'), 'interim_payment_logs', ['log_date'], unique=False)
    op.create_index(op.f('ix_interim_payment_logs_log_type'), 'interim_payment_logs', ['log_type'], unique=False)
    op.create_index(op.f('ix_interim_payment_logs_payment_id'), 'interim_payment_logs', ['payment_id'], unique=False)
    op.create_index(op.f('ix_interim_payment_logs_status'), 'interim_payment_logs', ['status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_interim_payment_logs_status'), table_name='interim_payment_logs')
    op.drop_index(op.f('ix_interim_payment_logs_payment_id'), table_name='interim_payment_logs')
    op.drop_index(op.f('ix_interim_payment_logs_log_type'), table_name='interim_payment_logs')
    op.drop_index(op.f('ix_interim_payment_logs_log_date'), table_name='interim_payment_logs')
    op.drop_index(op.f('ix_interim_payment_logs_id'), table_name='interim_payment_logs')
    op.drop_index('idx_log_status', table_name='interim_payment_logs')
    op.drop_index('idx_log_date_type', table_name='interim_payment_logs')
    op.drop_table('interim_payment_logs')
    op.drop_index(op.f('ix_interim_payment_allocations_reference_id'), table_name='interim_payment_allocations')
    op.drop_index(op.f('ix_interim_payment_allocations_payment_id'), table_name='interim_payment_allocations')
    op.drop_index(op.f('ix_interim_payment_allocations_ledger_posting_ref'), table_name='interim_payment_allocations')
    op.drop_index(op.f('ix_interim_payment_allocations_id'), table_name='interim_payment_allocations')
    op.drop_index(op.f('ix_interim_payment_allocations_category'), table_name='interim_payment_allocations')
    op.drop_index('idx_allocation_payment', table_name='interim_payment_allocations')
    op.drop_index('idx_allocation_category_ref', table_name='interim_payment_allocations')
    op.drop_table('interim_payment_allocations')
    op.drop_index(op.f('ix_interim_payments_status'), table_name='interim_payments')
    op.drop_index(op.f('ix_interim_payments_receipt_number'), table_name='interim_payments')
    op.drop_index(op.f('ix_interim_payments_payment_id'), table_name='interim_payments')
    op.drop_index(op.f('ix_interim_payments_payment_date'), table_name='interim_payments')
    op.drop_index(op.f('ix_interim_payments_medallion_id'), table_name='interim_payments')
    op.drop_index(op.f('ix_interim_payments_lease_id'), table_name='interim_payments')
    op.drop_index(op.f('ix_interim_payments_id'), table_name='interim_payments')
    op.drop_index(op.f('ix_interim_payments_driver_id'), table_name='interim_payments')
    op.drop_index('idx_payment_status', table_name='interim_payments')
    op.drop_index('idx_payment_medallion_date', table_name='interim_payments')
    op.drop_index('idx_payment_driver_date', table_name='interim_payments')
    op.drop_table('interim_payments')
    # ### end Alembic commands ###
