"""curb models refactored

Revision ID: 4e30ade0fd3c
Revises: f232c1cc8296
Create Date: 2025-10-16 14:01:41.068444

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '4e30ade0fd3c'
down_revision: Union[str, Sequence[str], None] = 'f232c1cc8296'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('curb_trip_reconciliation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trip_id', sa.Integer(), nullable=False),
    sa.Column('recon_stat', sa.Integer(), nullable=False),
    sa.Column('reconciled_at', sa.DateTime(), nullable=False),
    sa.Column('reconciled_by', sa.String(length=64), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['trip_id'], ['curb_trips.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('trip_id', name='uq_trip_reconciliation')
    )
    op.create_index(op.f('ix_curb_trip_reconciliation_id'), 'curb_trip_reconciliation', ['id'], unique=False)
    op.create_index(op.f('ix_curb_trip_reconciliation_recon_stat'), 'curb_trip_reconciliation', ['recon_stat'], unique=False)
    op.create_index(op.f('ix_curb_trip_reconciliation_reconciled_at'), 'curb_trip_reconciliation', ['reconciled_at'], unique=False)
    op.create_index(op.f('ix_curb_trip_reconciliation_trip_id'), 'curb_trip_reconciliation', ['trip_id'], unique=True)
    op.drop_index(op.f('ix_curb_trip_reconcilation_id'), table_name='curb_trip_reconcilation')
    op.drop_table('curb_trip_reconcilation')
    op.add_column('curb_import_logs', sa.Column('success_count', sa.Integer(), nullable=False))
    op.add_column('curb_import_logs', sa.Column('failure_count', sa.Integer(), nullable=False))
    op.add_column('curb_import_logs', sa.Column('duplicate_count', sa.Integer(), nullable=False))
    op.add_column('curb_import_logs', sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'))
    op.add_column('curb_import_logs', sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'))
    op.add_column('curb_import_logs', sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'))
    op.add_column('curb_import_logs', sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'))
    op.add_column('curb_import_logs', sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'))
    op.add_column('curb_import_logs', sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'))
    op.alter_column('curb_import_logs', 'import_source',
               existing_type=mysql.VARCHAR(length=64),
               nullable=False)
    op.alter_column('curb_import_logs', 'imported_by',
               existing_type=mysql.VARCHAR(length=64),
               nullable=False)
    op.alter_column('curb_import_logs', 'import_start',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('curb_import_logs', 'total_records',
               existing_type=mysql.INTEGER(),
               nullable=False)
    op.alter_column('curb_import_logs', 'status',
               existing_type=mysql.VARCHAR(length=32),
               nullable=False)
    op.create_index(op.f('ix_curb_import_logs_status'), 'curb_import_logs', ['status'], unique=False)
    op.create_foreign_key(None, 'curb_import_logs', 'users', ['modified_by'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(None, 'curb_import_logs', 'users', ['created_by'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.add_column('curb_trips', sa.Column('status', sa.String(length=48), nullable=False))
    op.add_column('curb_trips', sa.Column('associate_failed_reason', sa.Text(), nullable=True))
    op.add_column('curb_trips', sa.Column('post_failed_reason', sa.Text(), nullable=True))
    op.add_column('curb_trips', sa.Column('driver_fk', sa.Integer(), nullable=True))
    op.add_column('curb_trips', sa.Column('medallion_fk', sa.Integer(), nullable=True))
    op.add_column('curb_trips', sa.Column('vehicle_fk', sa.Integer(), nullable=True))
    op.add_column('curb_trips', sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'))
    op.add_column('curb_trips', sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'))
    op.add_column('curb_trips', sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'))
    op.add_column('curb_trips', sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'))
    op.add_column('curb_trips', sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'))
    op.add_column('curb_trips', sa.Column('updated_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was last updated'))
    op.alter_column('curb_trips', 'start_date',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('curb_trips', 'end_date',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('curb_trips', 'trip_amount',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'tips',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'extras',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'tolls',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'tax',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'imp_tax',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'total_amount',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'payment_type',
               existing_type=mysql.VARCHAR(length=2),
               nullable=False)
    op.alter_column('curb_trips', 'auth_amount',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'ehail_fee',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'health_fee',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'congestion_fee',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'airport_fee',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'cbdt_fee',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'passengers',
               existing_type=mysql.INTEGER(),
               nullable=False)
    op.alter_column('curb_trips', 'distance_service',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'distance_bs',
               existing_type=mysql.FLOAT(),
               nullable=False)
    op.alter_column('curb_trips', 'is_reconciled',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('curb_trips', 'is_posted',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.create_index('idx_curb_trip_cab_driver', 'curb_trips', ['cab_number', 'driver_id'], unique=False)
    op.create_index('idx_curb_trip_dates', 'curb_trips', ['start_date', 'end_date'], unique=False)
    op.create_index('idx_curb_trip_reconcile', 'curb_trips', ['is_reconciled', 'is_posted'], unique=False)
    op.create_index('idx_curb_trip_record_period', 'curb_trips', ['record_id', 'period'], unique=False)
    op.create_index(op.f('ix_curb_trips_cab_number'), 'curb_trips', ['cab_number'], unique=False)
    op.create_index(op.f('ix_curb_trips_driver_id'), 'curb_trips', ['driver_id'], unique=False)
    op.create_index(op.f('ix_curb_trips_is_posted'), 'curb_trips', ['is_posted'], unique=False)
    op.create_index(op.f('ix_curb_trips_is_reconciled'), 'curb_trips', ['is_reconciled'], unique=False)
    op.create_index(op.f('ix_curb_trips_start_date'), 'curb_trips', ['start_date'], unique=False)
    op.create_index(op.f('ix_curb_trips_status'), 'curb_trips', ['status'], unique=False)
    op.drop_constraint(op.f('curb_trips_ibfk_1'), 'curb_trips', type_='foreignkey')
    op.create_foreign_key(None, 'curb_trips', 'medallions', ['medallion_fk'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'curb_trips', 'users', ['created_by'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(None, 'curb_trips', 'vehicles', ['vehicle_fk'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'curb_trips', 'users', ['modified_by'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(None, 'curb_trips', 'drivers', ['driver_fk'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'curb_trips', 'curb_import_logs', ['import_id'], ['id'], ondelete='SET NULL')
    op.drop_column('curb_trips', 'imported_at')
    op.alter_column('pvb_logs', 'log_type',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.String(length=48),
               comment='Type of operation: Import, Associate, Post',
               existing_nullable=False)
    op.alter_column('pvb_logs', 'status',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.String(length=48),
               comment='Status: Pending, Success, Failure, Partial',
               existing_nullable=False)
    op.create_index(op.f('ix_pvb_logs_log_date'), 'pvb_logs', ['log_date'], unique=False)
    op.create_index(op.f('ix_pvb_logs_log_type'), 'pvb_logs', ['log_type'], unique=False)
    op.alter_column('pvb_violations', 'vehicle_type',
               existing_type=mysql.VARCHAR(length=24),
               nullable=True)
    op.alter_column('pvb_violations', 'amount_due',
               existing_type=mysql.INTEGER(),
               nullable=False)
    op.alter_column('pvb_violations', 'amount_paid',
               existing_type=mysql.INTEGER(),
               nullable=False)
    op.alter_column('pvb_violations', 'status',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.String(length=48),
               existing_nullable=False)
    op.drop_index(op.f('summons_number'), table_name='pvb_violations')
    op.create_index(op.f('ix_pvb_violations_driver_id'), 'pvb_violations', ['driver_id'], unique=False)
    op.create_index(op.f('ix_pvb_violations_issue_date'), 'pvb_violations', ['issue_date'], unique=False)
    op.create_index(op.f('ix_pvb_violations_medallion_id'), 'pvb_violations', ['medallion_id'], unique=False)
    op.create_index(op.f('ix_pvb_violations_status'), 'pvb_violations', ['status'], unique=False)
    op.create_index(op.f('ix_pvb_violations_summons_number'), 'pvb_violations', ['summons_number'], unique=True)
    op.create_index(op.f('ix_pvb_violations_vehicle_id'), 'pvb_violations', ['vehicle_id'], unique=False)
    op.drop_constraint(op.f('pvb_violations_ibfk_4'), 'pvb_violations', type_='foreignkey')
    op.drop_constraint(op.f('pvb_violations_ibfk_6'), 'pvb_violations', type_='foreignkey')
    op.drop_constraint(op.f('pvb_violations_ibfk_2'), 'pvb_violations', type_='foreignkey')
    op.drop_constraint(op.f('pvb_violations_ibfk_3'), 'pvb_violations', type_='foreignkey')
    op.create_foreign_key(None, 'pvb_violations', 'vehicles', ['vehicle_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'pvb_violations', 'drivers', ['driver_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'pvb_violations', 'pvb_logs', ['log_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'pvb_violations', 'medallions', ['medallion_id'], ['id'], ondelete='SET NULL')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'pvb_violations', type_='foreignkey')
    op.drop_constraint(None, 'pvb_violations', type_='foreignkey')
    op.drop_constraint(None, 'pvb_violations', type_='foreignkey')
    op.drop_constraint(None, 'pvb_violations', type_='foreignkey')
    op.create_foreign_key(op.f('pvb_violations_ibfk_3'), 'pvb_violations', 'pvb_logs', ['log_id'], ['id'])
    op.create_foreign_key(op.f('pvb_violations_ibfk_2'), 'pvb_violations', 'drivers', ['driver_id'], ['id'])
    op.create_foreign_key(op.f('pvb_violations_ibfk_6'), 'pvb_violations', 'vehicles', ['vehicle_id'], ['id'])
    op.create_foreign_key(op.f('pvb_violations_ibfk_4'), 'pvb_violations', 'medallions', ['medallion_id'], ['id'])
    op.drop_index(op.f('ix_pvb_violations_vehicle_id'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_summons_number'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_status'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_medallion_id'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_issue_date'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_driver_id'), table_name='pvb_violations')
    op.create_index(op.f('summons_number'), 'pvb_violations', ['summons_number'], unique=True)
    op.alter_column('pvb_violations', 'status',
               existing_type=sa.String(length=48),
               type_=mysql.VARCHAR(length=50),
               existing_nullable=False)
    op.alter_column('pvb_violations', 'amount_paid',
               existing_type=mysql.INTEGER(),
               nullable=True)
    op.alter_column('pvb_violations', 'amount_due',
               existing_type=mysql.INTEGER(),
               nullable=True)
    op.alter_column('pvb_violations', 'vehicle_type',
               existing_type=mysql.VARCHAR(length=24),
               nullable=False)
    op.drop_index(op.f('ix_pvb_logs_log_type'), table_name='pvb_logs')
    op.drop_index(op.f('ix_pvb_logs_log_date'), table_name='pvb_logs')
    op.alter_column('pvb_logs', 'status',
               existing_type=sa.String(length=48),
               type_=mysql.VARCHAR(length=50),
               comment=None,
               existing_comment='Status: Pending, Success, Failure, Partial',
               existing_nullable=False)
    op.alter_column('pvb_logs', 'log_type',
               existing_type=sa.String(length=48),
               type_=mysql.VARCHAR(length=50),
               comment=None,
               existing_comment='Type of operation: Import, Associate, Post',
               existing_nullable=False)
    op.add_column('curb_trips', sa.Column('imported_at', mysql.DATETIME(), nullable=True))
    op.drop_constraint(None, 'curb_trips', type_='foreignkey')
    op.drop_constraint(None, 'curb_trips', type_='foreignkey')
    op.drop_constraint(None, 'curb_trips', type_='foreignkey')
    op.drop_constraint(None, 'curb_trips', type_='foreignkey')
    op.drop_constraint(None, 'curb_trips', type_='foreignkey')
    op.drop_constraint(None, 'curb_trips', type_='foreignkey')
    op.create_foreign_key(op.f('curb_trips_ibfk_1'), 'curb_trips', 'curb_import_logs', ['import_id'], ['id'])
    op.drop_index(op.f('ix_curb_trips_status'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_start_date'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_is_reconciled'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_is_posted'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_driver_id'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_cab_number'), table_name='curb_trips')
    op.drop_index('idx_curb_trip_record_period', table_name='curb_trips')
    op.drop_index('idx_curb_trip_reconcile', table_name='curb_trips')
    op.drop_index('idx_curb_trip_dates', table_name='curb_trips')
    op.drop_index('idx_curb_trip_cab_driver', table_name='curb_trips')
    op.alter_column('curb_trips', 'is_posted',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('curb_trips', 'is_reconciled',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('curb_trips', 'distance_bs',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'distance_service',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'passengers',
               existing_type=mysql.INTEGER(),
               nullable=True)
    op.alter_column('curb_trips', 'cbdt_fee',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'airport_fee',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'congestion_fee',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'health_fee',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'ehail_fee',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'auth_amount',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'payment_type',
               existing_type=mysql.VARCHAR(length=2),
               nullable=True)
    op.alter_column('curb_trips', 'total_amount',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'imp_tax',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'tax',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'tolls',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'extras',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'tips',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'trip_amount',
               existing_type=mysql.FLOAT(),
               nullable=True)
    op.alter_column('curb_trips', 'end_date',
               existing_type=sa.DATE(),
               nullable=True)
    op.alter_column('curb_trips', 'start_date',
               existing_type=sa.DATE(),
               nullable=True)
    op.drop_column('curb_trips', 'updated_on')
    op.drop_column('curb_trips', 'created_on')
    op.drop_column('curb_trips', 'modified_by')
    op.drop_column('curb_trips', 'created_by')
    op.drop_column('curb_trips', 'is_active')
    op.drop_column('curb_trips', 'is_archived')
    op.drop_column('curb_trips', 'vehicle_fk')
    op.drop_column('curb_trips', 'medallion_fk')
    op.drop_column('curb_trips', 'driver_fk')
    op.drop_column('curb_trips', 'post_failed_reason')
    op.drop_column('curb_trips', 'associate_failed_reason')
    op.drop_column('curb_trips', 'status')
    op.drop_constraint(None, 'curb_import_logs', type_='foreignkey')
    op.drop_constraint(None, 'curb_import_logs', type_='foreignkey')
    op.drop_index(op.f('ix_curb_import_logs_status'), table_name='curb_import_logs')
    op.alter_column('curb_import_logs', 'status',
               existing_type=mysql.VARCHAR(length=32),
               nullable=True)
    op.alter_column('curb_import_logs', 'total_records',
               existing_type=mysql.INTEGER(),
               nullable=True)
    op.alter_column('curb_import_logs', 'import_start',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('curb_import_logs', 'imported_by',
               existing_type=mysql.VARCHAR(length=64),
               nullable=True)
    op.alter_column('curb_import_logs', 'import_source',
               existing_type=mysql.VARCHAR(length=64),
               nullable=True)
    op.drop_column('curb_import_logs', 'updated_on')
    op.drop_column('curb_import_logs', 'created_on')
    op.drop_column('curb_import_logs', 'modified_by')
    op.drop_column('curb_import_logs', 'created_by')
    op.drop_column('curb_import_logs', 'is_active')
    op.drop_column('curb_import_logs', 'is_archived')
    op.drop_column('curb_import_logs', 'duplicate_count')
    op.drop_column('curb_import_logs', 'failure_count')
    op.drop_column('curb_import_logs', 'success_count')
    op.create_table('curb_trip_reconcilation',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trip_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recon_stat', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reconciled_at', mysql.DATETIME(), nullable=True),
    sa.Column('reconciled_by', mysql.VARCHAR(length=64), nullable=True),
    sa.ForeignKeyConstraint(['trip_id'], ['curb_trips.id'], name=op.f('curb_trip_reconcilation_ibfk_1')),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index(op.f('ix_curb_trip_reconcilation_id'), 'curb_trip_reconcilation', ['id'], unique=False)
    op.drop_index(op.f('ix_curb_trip_reconciliation_trip_id'), table_name='curb_trip_reconciliation')
    op.drop_index(op.f('ix_curb_trip_reconciliation_reconciled_at'), table_name='curb_trip_reconciliation')
    op.drop_index(op.f('ix_curb_trip_reconciliation_recon_stat'), table_name='curb_trip_reconciliation')
    op.drop_index(op.f('ix_curb_trip_reconciliation_id'), table_name='curb_trip_reconciliation')
    op.drop_table('curb_trip_reconciliation')
    # ### end Alembic commands ###
